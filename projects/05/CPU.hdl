// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	Mux16(a = instruction, b = outMinternal, sel = instruction[15], out = inA);
	And(a = instruction[15], b = instruction[5], out = d1Cinstruction);
	Not(in = instruction[15], out = Ainstruction);
	Or(a = d1Cinstruction, b = Ainstruction, out = loadA);
	ARegister(in = inA, load = loadA, out = outA);
	And(a = instruction[15], b = instruction[12], out = aCinstruction);
	Mux16(a = outA, b = inM, sel = aCinstruction, out = AluIn2);
	And(a = instruction[15], b = instruction[4], out = d2Cinstruction);
	DRegister(in = outMinternal, load = d2Cinstruction, out = AluIn1);
	And(a = instruction[15], b = instruction[11], out = zxCinstruction);
	And(a = instruction[15], b = instruction[10], out = nxCinstruction);
	And(a = instruction[15], b = instruction[9], out = zyCinstruction);
	And(a = instruction[15], b = instruction[8], out = nyCinstruction);
	And(a = instruction[15], b = instruction[7], out = fCinstruction);
	And(a = instruction[15], b = instruction[6], out = noCinstruction);
	ALU(x = AluIn1, y = AluIn2, zx = zxCinstruction, nx = nxCinstruction, zy = zyCinstruction, ny = nyCinstruction, f = fCinstruction, no = noCinstruction, zr = zr, ng = ng, out = outMinternal, out = outM);
	Or(a = zr, b = ng, out = zrORng);
	Not(in = zrORng, out = ps); // positive
	And(a = ng, b = instruction[2], out = Cond1);
	And(a = zr, b = instruction[1], out = Cond2);
	And(a = ps, b = instruction[0], out = Cond3);
	Or(a = Cond1, b = Cond2, out = Cond12);
	Or(a = Cond12, b = Cond3, out = load);
	And(a = instruction[15], b = load, out = loadCinstruction);
	PC(in = outA, inc = true, reset = reset, load = loadCinstruction, out[0..14] = pc);
	And(a = instruction[15], b = instruction[3], out = writeM);
	And16(a[0..15] = true, b = outA, out[0..14] = addressM);



}